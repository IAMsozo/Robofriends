{"version":3,"sources":["Component/SearchBox.js","Component/Card.js","Component/CardList.js","Component/Scroll.js","Component/ErrorBoundary.js","Container/App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","Card","id","name","email","alt","src","CardList","robots","map","users","i","key","Scroll","props","style","overflowY","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mPAUeA,EARG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,6BACI,2BAAOC,UAAU,yCAAyCC,KAAK,SAASC,YAAY,mBAAmBC,SAAUJ,MCU9GK,EAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACrB,OACI,yBAAKP,UAAU,uDACX,yBAAKQ,IAAI,aAAaC,IAAG,mCAA+BJ,EAA/B,cACzB,6BACI,4BAAKC,GACL,2BAAIC,MCQLG,EAbE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACI,yBAAKX,UAAU,OAEXW,EAAOC,KAAI,SAACC,EAAOC,GACf,OAAQ,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,KAAMO,EAAMP,KAAMD,GAAIQ,EAAMR,GAAIE,MAASM,EAAMN,aCEpES,EARF,SAACC,GACZ,OACI,yBAAKC,MAAS,CAACC,UAAU,SAAUC,OAAO,SAAUpB,UAAU,MACzDiB,EAAMI,WCkBJC,E,YApBX,WAAaL,GAAO,IAAD,8BACf,4CAAMA,KACDM,MAAQ,CACTC,UAAS,GAHE,E,+EAODC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAGG,KAAKJ,MAAMC,SACH,sDAEJG,KAAKV,MAAMI,a,GAhBEQ,IAAMC,WCmDnBC,E,YA9CX,aAAgB,IAAD,8BACX,+CAaJC,eAAiB,SAACC,GACV,OAAO,EAAKL,SAAS,CAACM,YAAYD,EAAME,OAAOC,SAbnD,EAAKb,MAAQ,CACTZ,OAAQ,GACRuB,YAAa,IAJN,E,iFAQK,IAAD,OACfG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAzB,GAAK,OAAI,EAAKe,SAAS,CAACjB,OAAQE,S,+BAOhC,IAAD,EAC6Bc,KAAKJ,MAA5BW,EADN,EACMA,YAAavB,EADnB,EACmBA,OAClB8B,EAAiB9B,EAAO+B,QAAO,SAAAC,GACjC,OAAOA,EAAMrC,KAAKsC,cAAcC,SAASX,EAAYU,kBAGzD,OAAIjC,EAAOmC,OAMP,yBAAK9C,UAAU,MACf,2CACA,kBAAC,EAAD,CAAWD,aAAgB4B,KAAKK,iBAChC,kBAAC,EAAD,KACG,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUrB,OAAU8B,OAVjB,8C,GA1BDZ,IAAMC,W,MCMJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,iB","file":"static/js/main.c484db72.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div>\r\n            <input className='pa2 ma3 bg-lightest-blue b--dark-green' type='search' placeholder='search robots...' onChange={searchChange}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return(\r\n        <div className=\"tc dib grow shadow-5 br3 bw5 pa3 ma2 bg-light-green\">\r\n            <img alt=\"robofriend\" src= {`https://www.robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    return (\r\n        <div className='ma3'>\r\n           {\r\n            robots.map((users, i) => {\r\n                return (<Card key={i} name={users.name} id={users.id} email = {users.email} />)\r\n            })\r\n            }\r\n        </div>\r\n        );\r\n\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n    return(\r\n        <div style = {{overflowY:'scroll', height:'800px'}} className='ba'>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\n  export default Scroll;\r\n","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component{\r\n    constructor (props){\r\n        super(props);\r\n        this.state = {\r\n            hasError:false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError:true});\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Oops! That is not nice</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React from 'react';\r\nimport SearchBox from '../Component/SearchBox';\r\nimport CardList from '../Component/CardList';\r\nimport Scroll from '../Component/Scroll.js'\r\nimport ErrorBoundary from '../Component/ErrorBoundary.js'\r\n\r\nclass App extends React.Component {\r\n    constructor () {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchField: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => this.setState({robots: users}))\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n            return this.setState({searchField:event.target.value});\r\n        }\r\n\r\n    render() {\r\n            const {searchField, robots} = this.state;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n\r\n        if(!robots.length){\r\n            return <h1>LOADING...</h1>\r\n        }\r\n\r\n        else{\r\n           return(\r\n            <div className='tc'>\r\n            <h1>RoboFriends</h1>\r\n            <SearchBox searchChange = {this.onSearchChange}/>\r\n            <Scroll>\r\n               <ErrorBoundary>\r\n                <CardList robots = {filteredRobots} />\r\n               </ErrorBoundary>\r\n            </Scroll>\r\n            </div>\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './Container/App.css';\r\nimport App from './Container/App';\r\nimport 'tachyons';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}